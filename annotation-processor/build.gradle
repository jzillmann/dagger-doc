ext.pomName = 'Dagger Doc - Annotation Processor'
ext.pomDescription = 'Annotation Processor generating docs for a Dagger 2 project.'

apply plugin: 'java'
apply from: rootProject.file("gradle/eclipse.gradle")
apply from: rootProject.file("gradle/publish.gradle")
apply plugin: 'net.ltgt.apt-eclipse'
apply plugin: 'net.ltgt.apt'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

sourceSets {
    main {
        resources {
            srcDir "build/gen"
        }
    }
}

jar {
   exclude('ui/provided.js')
}

dependencies {
    compile         project(':dagger-doc-annotations')
    compile         group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc4'
    compileOnly     group: 'com.google.dagger', name: 'dagger', version: '2.16'
    testCompile     group: 'com.google.auto.service', name: 'auto-service', version: '1.0-rc4'
    testCompile     group: 'com.google.dagger', name: 'dagger', version: '2.16'
    testCompile     group: 'com.google.testing.compile', name: 'compile-testing', version: '0.15'
    
    testAnnotationProcessor group: 'com.google.dagger', name: 'dagger-compiler', version: '2.16'

    testCompile     group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testCompile     group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion
    testCompileOnly group: 'org.apiguardian', name: 'apiguardian-api', version: '1.0.0' // Avoid compiler warnings about @API annotations in JUnit code

    testCompile group: 'org.assertj', name:'assertj-core', version:'3.9.0'
    testCompile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
}

test {
    useJUnitPlatform()
    ignoreFailures project.hasProperty('ignoreTestFailures')
}

task npmInstall(type:Exec) {
    group "UI"
    description 'Installs all necessary UI libraries.'

    workingDir = rootProject.file("html-report")
    commandLine "npm", "install", "--no-save"

    inputs.file("${workingDir}/package-lock.json")
    outputs.dir("${workingDir}/node_modules")
}

task npmBuild(type:Exec) {
    group "UI"
    description 'Builds the UI artifacts.'
    dependsOn "npmInstall"

    workingDir = rootProject.file("html-report")
    commandLine "npm", "run", "build"

    inputs.dir("${workingDir}/src")
    outputs.dir("build/gen/ui")
}

publish.dependsOn npmBuild
